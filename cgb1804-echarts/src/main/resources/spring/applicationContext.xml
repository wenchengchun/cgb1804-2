<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	
	<!--开启包扫描  -->
	<context:component-scan base-package="com.cgb"/>
	
	
	<!--引入外部配置文件  -->
	<!-- <context:property-placeholder 
			location="classpath:/properties/*.properties"/> -->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!--Resource[] locations;  -->
		<property name="locations">
			<list>
				<value>classpath:/properties/jdbc.properties</value>
				<value>classpath:/properties/redis.properties</value>
			</list>
		</property>
	</bean>
	
	
	<!--配置数据源  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
	</bean>
	
	<!--AOP技术实现事务控制
		在原有方式的基础上,对方法进行扩展
		通知: 前置通知  后置通知  异常通知  最终通知
		作用:记录程序执行的过程
		最为重要的通知类型: 环绕通知
		作用:可以改变程序的执行状态
		通知的用途:
			对业务逻辑进行扩展
		切入点:
			只有满足切入点表达式的方法才可以执行通知.
	  -->
	  
	  <!--开启事务注解  -->
	  <!-- <tx:annotation-driven/> -->
	  
	  <!--配置声明式事务处理-->
	  <!--1.配置事务管理器  -->
	  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  		<property name="dataSource" ref="dataSource"></property>
	  </bean>
	  
	  <!--2.配置事务通知  定义事务策略
	  		事务传播属性
	  		propagation="REQUIRED" 表示当前操作必须添加事务
	  		propagation="REQUIRES_NEW" 每次方法执行都会新建一个事务
	  		propagation="SUPPORTS" 表示事务支持的
	  		propagation="NEVER"    从不添加事务 
	  		
	  	  2.1spring中默认的事务策略?????
	  	  	规则:
	  	  		如果spring遇到运行时异常则默认回滚事务.
	  	  		如果spring中遇到检测异常/编译异常,事务默认不回滚
	  	  		Sql异常/IO异常/自定义异常 throw
	  		
	  		rollback-for="异常类型"  指定异常回滚事务
	        no-rollback-for="异常类型" 指定异常类型不回滚
	        read-only="true"  数据库操作只读
	       	
	       	
	       	总结:
	       		如果程序中需要处理异常.则需要考虑事务回滚等特性.
	       		一般将检测异常转化为运行时异常
	       		thorw new RuntimeException
	    -->
	  <tx:advice id="txAdvice" transaction-manager="transactionManager">
	  		<tx:attributes>
	  			<tx:method name="save*" propagation="REQUIRED"/>
	  			<tx:method name="delete*" propagation="REQUIRED"/>
	  			<tx:method name="update*" propagation="REQUIRED"/>
	  			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	  			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
	  		</tx:attributes>
	  </tx:advice>
	  
	  <!--3.配置事务切面 
	  	 3.1 within表达式
	  	 	语法:within(包名.类名)
	  	 		within(com.jt.manage.service.UserServiceImpl)
	  	 		粗粒度的事务控制
	  	 3.2 execution
	  	 	语法:execution(返回值类型 包名.类名.方法名(参数列表))
	  	 	例子:
	  	 		 execution(* com.jt.manage.service.*.*(..))
	   -->
	  <aop:config>
	  	<aop:pointcut expression="execution(* com.cgb.ehcarts.service.*.*(..))" id="pc"/>
	  	<!--配置通知  -->
	  	<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	  </aop:config>
</beans>