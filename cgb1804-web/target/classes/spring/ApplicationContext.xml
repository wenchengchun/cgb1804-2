<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!-- 开启包扫描 -->
     <context:component-scan base-package="com.cgb"></context:component-scan>
    
    <!-- 高级版导配置文件方法 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/properties/jdbc.properties</value>
                <value>classpath:/properties/redis.properties</value>
                <value>classpath:/properties/httpclient.properties</value>
                <value>classpath:/properties/solr.properties</value>
            </list>
        </property>
    </bean>
    <!-- 引入配置文件方法 用*可以引一堆-->
  <!--   <context:property-placeholder location="classpath:/properties/jdbc.properties"/> -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    
    <!--AOP技术实现事务控制
        前置 后置 异常 最终 通知
        环绕通知  可以改变程序执行的状态
        用途 ： 对业务逻辑进行扩展
        切入点:切的位置
        连接点:c传的内容
        
        事务管理器-advice-aopconfig
      -->
    <!-- <tx:annotation-driven/> -->
    
    <!-- 配置声明式的事务管理器 -->
    <!-- 1、配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 2、配事务通知  定义事务策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 新增以save开头的方法 不用再配事务 这里统一了          下面这个 必须加事务 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <!-- SUPPORTS表示 事务支持的 有就用 没有就算了
               NEVER表示从不添加事务 
                REQUIRED_NEW表示每次方法执行都会新建一个事务
            
            SPring中默认的事务策略是
                                    规则:运行时异常 则默认回滚事务
                                            如果spring中遇到检查异常/编译异常  事务默认不回滚 
                  sql异常/Io异常/自定义异常
                  
                  rollbackfor 指定异常回滚事务
                  no-rollbackfor 指定异常不回滚事务
                  readOnly=true 只读
                  
                                    总结 如果程序中需要处理异常  则需要考虑事务的回滚等特性
                                            一般将检查异常转为运行时异常 runtimeException
            -->
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 3、配事务的切面 
       3.1 within 表达式 
                语法:within(包名.类名)，粗粒度
          within(com.jt.manage.service.UserServiceImpl)
      3.2 execution          
                语法:execution(返回值类型 包名.类名.方法名（参数列表）)
                例子:
          execution(int)
          *表示任意的返回值           包                                   类   方法  ..表示任意参数
          execution(* com.jt.manage.service.*.*(..))
                                                                                                                 参数类型必须是int+String的
          execution(* com.jt.manage.service.*.*(int,String))
      3.3 annotation 写上注解的全类名, 当有这个注解的就切进去 
                        这个注解修饰的方法执行时，可以通过反射获得信息，可以进一步封装成日志- 
     -->
    <aop:config>
        <!-- 添加切入点 粗粒度的事务控制-->
        <aop:pointcut expression="execution(* com.jt.web.service.*.*(..))" id="pc"/>
        <!--添加事务通知  -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
    </aop:config>
    
    
    <!-- 
    
    
            配置扫描包
                配置dataSource
                配置事务通知
                配置事务切面
    
     -->
</beans>